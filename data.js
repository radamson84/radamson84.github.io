gdjs.projectData = {"firstLayout": "","gdVersion": {"build": 98,"major": 4,"minor": 0,"revision": 0},"properties": {"adMobAppId": "","adaptGameResolutionAtRuntime": false,"folderProject": false,"linuxExecutableFilename": "","macExecutableFilename": "","orientation": "landscape","packageName": "com.example.gamename","projectFile": "C:\\Users\\Robert (Laptop)\\Documents\\GDevelop projects\\Landshark\\game.json","scaleMode": "linear","sizeOnStartupMode": "adaptWidth","useExternalSourceFiles": false,"version": "1.0.0","winExecutableFilename": "","winExecutableIconFile": "","name": "Landshark","author": "","windowWidth": 1080,"windowHeight": 480,"latestCompilationDirectory": "","maxFPS": 60,"minFPS": 20,"verticalSync": false,"platformSpecificAssets": {},"loadingScreen": {"showGDevelopSplash": true},"extensions": [{"name": "BuiltinObject"},{"name": "BuiltinAudio"},{"name": "BuiltinVariables"},{"name": "BuiltinTime"},{"name": "BuiltinMouse"},{"name": "BuiltinKeyboard"},{"name": "BuiltinJoystick"},{"name": "BuiltinCamera"},{"name": "BuiltinWindow"},{"name": "BuiltinFile"},{"name": "BuiltinNetwork"},{"name": "BuiltinScene"},{"name": "BuiltinAdvanced"},{"name": "Sprite"},{"name": "BuiltinCommonInstructions"},{"name": "BuiltinCommonConversions"},{"name": "BuiltinStringInstructions"},{"name": "BuiltinMathematicalTools"},{"name": "BuiltinExternalLayouts"}],"platforms": [{"name": "GDevelop JS platform"}],"currentPlatform": "GDevelop JS platform"},"resources": {"resources": [{"alwaysLoaded": false,"file": "NewObject-1.png","kind": "image","metadata": "","name": "NewObject-1.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-1.png","kind": "image","metadata": "","name": "NewObject-1-1.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-2.png","kind": "image","metadata": "","name": "NewObject-1-2.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-3.png","kind": "image","metadata": "","name": "NewObject-1-3.png","smoothed": true,"userAdded": false},{"alwaysLoaded": false,"file": "NewObject-1-4.png","kind": "image","metadata": "","name": "NewObject-1-4.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-5.png","kind": "image","metadata": "","name": "NewObject-1-5.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-8.png","kind": "image","metadata": "","name": "NewObject-1-8.png","smoothed": true,"userAdded": true},{"file": "magnum.wav","kind": "audio","metadata": "","name": "magnum.wav","userAdded": false},{"file": "m_gurel.wav","kind": "audio","metadata": "","name": "m_gurel.wav","userAdded": true},{"file": "croc_die.wav","kind": "audio","metadata": "","name": "croc_die.wav","userAdded": true},{"file": "explos1.wav","kind": "audio","metadata": "","name": "explos1.wav","userAdded": true},{"file": "targ1.wav","kind": "audio","metadata": "","name": "targ1.wav","userAdded": true},{"file": "vul_at1.wav","kind": "audio","metadata": "","name": "vul_at1.wav","userAdded": false},{"file": "gasmeter.wav","kind": "audio","metadata": "","name": "gasmeter.wav","userAdded": true},{"file": "tick.wav","kind": "audio","metadata": "","name": "tick.wav","userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-7.png","kind": "image","metadata": "","name": "NewObject-1-7.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-7-1.png","kind": "image","metadata": "","name": "NewObject-1-7-1.png","smoothed": true,"userAdded": true},{"file": "01_-_Syobon_Action_-_W32_-_Titerman.ogg","kind": "audio","metadata": "","name": "01_-_Syobon_Action_-_W32_-_Titerman.ogg","userAdded": true},{"alwaysLoaded": false,"file": "NewFile-1.png","kind": "image","metadata": "","name": "NewFile-1.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-9.png","kind": "image","metadata": "","name": "NewObject-1-9.png","smoothed": true,"userAdded": true},{"file": "Bimbo_JVE.ttf","kind": "font","metadata": "","name": "Bimbo_JVE.ttf","userAdded": true},{"file": "Retro Gaming.ttf","kind": "font","metadata": "","name": "Retro Gaming.ttf","userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-12.png","kind": "image","metadata": "","name": "NewObject-1-12.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-13.png","kind": "image","metadata": "","name": "NewObject-1-13.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-14.png","kind": "image","metadata": "","name": "NewObject-1-14.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-6.png","kind": "image","metadata": "","name": "NewObject-1-6.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewFile-1-0.png","kind": "image","metadata": "","name": "NewFile-1-0.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-11.png","kind": "image","metadata": "","name": "NewObject-1-11.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-15.png","kind": "image","metadata": "","name": "NewObject-1-15.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-16.png","kind": "image","metadata": "","name": "NewObject-1-16.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-17.png","kind": "image","metadata": "","name": "NewObject-1-17.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-18.png","kind": "image","metadata": "","name": "NewObject-1-18.png","smoothed": true,"userAdded": true},{"file": "dog_d2.wav","kind": "audio","metadata": "","name": "dog_d2.wav","userAdded": true},{"file": "dog_at1.wav","kind": "audio","metadata": "","name": "dog_at1.wav","userAdded": true},{"alwaysLoaded": false,"file": "NewFile-1-2.png","kind": "image","metadata": "","name": "NewFile-1-2.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-19.png","kind": "image","metadata": "","name": "NewObject-1-19.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-2.png","kind": "image","metadata": "","name": "NewObject-2.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-3.png","kind": "image","metadata": "","name": "NewObject-3.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-7-1-0.png","kind": "image","metadata": "","name": "NewObject-1-7-1-0.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-7-2.png","kind": "image","metadata": "","name": "NewObject-1-7-2.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-10.png","kind": "image","metadata": "","name": "NewObject-1-10.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-20.png","kind": "image","metadata": "","name": "NewObject-1-20.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewFile-1-1.png","kind": "image","metadata": "","name": "NewFile-1-1.png","smoothed": true,"userAdded": true},{"alwaysLoaded": false,"file": "NewObject-1-0.png","kind": "image","metadata": "","name": "NewObject-1-0.png","smoothed": true,"userAdded": true}],"resourceFolders": []},"objects": [],"objectsGroups": [],"variables": [],"layouts": [{"b": 209,"disableInputWhenNotFocused": true,"mangledName": "Boot","name": "Boot","oglFOV": 90,"oglZFar": 500,"oglZNear": 1,"r": 209,"standardSortMethod": true,"stopSoundsOnStartup": true,"title": "","v": 209,"uiSettings": {"grid": false,"gridB": 255,"gridG": 180,"gridHeight": 32,"gridOffsetX": 0,"gridOffsetY": 0,"gridR": 158,"gridWidth": 32,"snap": true,"windowMask": false,"zoomFactor": 1},"objectsGroups": [],"variables": [],"instances": [],"objects": [],"events": [],"layers": [{"name": "","visibility": true,"cameras": [{"defaultSize": true,"defaultViewport": true,"height": 0,"viewportBottom": 1,"viewportLeft": 0,"viewportRight": 1,"viewportTop": 0,"width": 0}],"effects": []}],"behaviorsSharedData": []},{"b": 134,"disableInputWhenNotFocused": true,"mangledName": "Start_32Menu","name": "Start Menu","oglFOV": 90,"oglZFar": 500,"oglZNear": 1,"r": 184,"standardSortMethod": true,"stopSoundsOnStartup": true,"title": "","v": 233,"uiSettings": {"grid": false,"gridB": 255,"gridG": 180,"gridHeight": 32,"gridOffsetX": 0,"gridOffsetY": 0,"gridR": 158,"gridWidth": 32,"snap": true,"windowMask": false,"zoomFactor": 0.868},"objectsGroups": [],"variables": [],"instances": [{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "StartGameSelection","width": 0,"x": 450,"y": 160,"zOrder": 1,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "HighScoresSelection","width": 0,"x": 450,"y": 200,"zOrder": 2,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "DebugModeSelection","width": 0,"x": 450,"y": 320,"zOrder": 3,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": true,"height": 65,"layer": "","locked": false,"name": "ControlsDisplay","width": 333,"x": 400,"y": 400,"zOrder": 4,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "DebugControlsDisplay","width": 0,"x": 400,"y": 450,"zOrder": 5,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "InstructionsSelection","width": 0,"x": 450,"y": 240,"zOrder": 6,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "AudioDisplay","width": 0,"x": 450,"y": 280,"zOrder": 7,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "Title","width": 0,"x": 330,"y": 50,"zOrder": 8,"numberProperties": [],"stringProperties": [],"initialVariables": []}],"objects": [{"bold": false,"italic": false,"name": "StartGameSelection","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "START GAME","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "HighScoresSelection","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "HIGH SCORES","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "DebugModeSelection","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "DEBUG MODE: OFF","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"name": "Selector","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-6.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]}]},{"bold": false,"italic": false,"name": "ControlsDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "W, S - Menu Navigation\nSpace - Menu Selection\n","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "DebugControlsDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "InstructionsSelection","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "INSTRUCTIONS","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "AudioDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "AUDIO MENU","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": true,"italic": false,"name": "Title","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "L A N D S H A R K","font": "Retro Gaming.ttf","characterSize": 40,"color": {"b": 0,"g": 0,"r": 0}}],"events": [],"layers": [{"name": "","visibility": true,"cameras": [{"defaultSize": true,"defaultViewport": true,"height": 0,"viewportBottom": 1,"viewportLeft": 0,"viewportRight": 1,"viewportTop": 0,"width": 0}],"effects": []}],"behaviorsSharedData": []},{"b": 194,"disableInputWhenNotFocused": true,"mangledName": "Main_32Game","name": "Main Game","oglFOV": 90,"oglZFar": 500,"oglZNear": 1,"r": 80,"standardSortMethod": true,"stopSoundsOnStartup": true,"title": "","v": 227,"uiSettings": {"grid": false,"gridB": 255,"gridG": 180,"gridHeight": 32,"gridOffsetX": 0,"gridOffsetY": 0,"gridR": 158,"gridWidth": 32,"snap": true,"windowMask": false,"zoomFactor": 0.8678},"objectsGroups": [],"variables": [],"instances": [{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "HealthDisplay","width": 0,"x": 70,"y": 439,"zOrder": 3,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreDisplay","width": 0,"x": 10,"y": 10,"zOrder": 3,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "GameOverDisplay","width": 0,"x": 490,"y": 220,"zOrder": 4,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "BalloonDisplay","width": 0,"x": 800,"y": 10,"zOrder": 5,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "HungerDisplay","width": 0,"x": 800,"y": 40,"zOrder": 6,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "InvincibilityDisplay","width": 0,"x": 800,"y": 70,"zOrder": 7,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": true,"height": 80,"layer": "","locked": false,"name": "FloorTile","width": 1080,"x": 0,"y": 400,"zOrder": 1,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "HealthBar","width": 0,"x": 65,"y": 430,"zOrder": 2,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": true,"height": 28,"layer": "","locked": false,"name": "HealthPip","width": 800,"x": 165,"y": 437,"zOrder": 9,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "PausedDisplay","width": 0,"x": 344,"y": 156,"zOrder": 10,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "LevelDisplay","width": 0,"x": 240,"y": 10,"zOrder": 11,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "DogDisplay","width": 0,"x": 500,"y": 10,"zOrder": 12,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "BalloonCountDisplay","width": 0,"x": 500,"y": 40,"zOrder": 13,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ChickenCountDisplay","width": 0,"x": 500,"y": 70,"zOrder": 14,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "FPSDisplay","width": 0,"x": 360,"y": 10,"zOrder": 15,"numberProperties": [],"stringProperties": [],"initialVariables": []}],"objects": [{"name": "Shark","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": true,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-20.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 32},"centerPoint": {"automatic": false,"name": "centre","x": 32,"y": 32},"customCollisionMask": []},{"hasCustomCollisionMask": false,"image": "NewObject-1-10.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 32},"centerPoint": {"automatic": false,"name": "centre","x": 32,"y": 32},"customCollisionMask": []}]}]}]},{"name": "Gun","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-0.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": false,"name": "centre","x": 32,"y": 56},"customCollisionMask": []}]}]}]},{"name": "Bullet","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [{"name": "ScoreChain","value": ""}],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-14.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]}]},{"name": "BalloonBig","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": true,"image": "NewObject-1-13.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": [[{"x": 47,"y": 14},{"x": 47,"y": 29},{"x": 33,"y": 41},{"x": 14,"y": 41},{"x": 1,"y": 29},{"x": 1,"y": 14},{"x": 14,"y": 0},{"x": 33,"y": 0}]]}]}]}]},{"name": "BalloonMid","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": true,"image": "NewObject-1-15.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": [[{"x": 1,"y": 12},{"x": 12,"y": 1},{"x": 28,"y": 1},{"x": 39,"y": 12},{"x": 39,"y": 25},{"x": 28,"y": 35},{"x": 12,"y": 35},{"x": 1,"y": 25}]]}]}]}]},{"name": "BalloonSmall","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": true,"image": "NewObject-1-16.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": [[{"x": 10,"y": 1},{"x": 21,"y": 1},{"x": 31,"y": 10},{"x": 31,"y": 19},{"x": 21,"y": 28},{"x": 10,"y": 28},{"x": 1,"y": 19},{"x": 1,"y": 10}]]}]}]}]},{"name": "CookedChicken","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [{"name": "GravityAcceleration","value": ""}],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": true,"image": "NewObject-1-5.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": [[{"x": 31,"y": 5},{"x": 31,"y": 21},{"x": 21,"y": 29},{"x": 11,"y": 29},{"x": 1,"y": 21},{"x": 1,"y": 10},{"x": 11,"y": 1},{"x": 25,"y": 1}]]}]}]}]},{"name": "Chicken","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [{"name": "GravityAcceleration","value": ""},{"name": "WalkFactor","value": ""}],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-7.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]},{"name": "NewObject-1-7","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-7-1.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]},{"name": "","useMultipleDirections": false,"directions": [{"looping": true,"timeBetweenFrames": 0.1,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-7-1-0.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []},{"hasCustomCollisionMask": false,"image": "NewObject-1-7-2.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]}]},{"name": "Bomb","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [{"name": "GravityAcceleration","value": ""}],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": true,"image": "NewObject-1-8.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": [[{"x": 31,"y": 10},{"x": 31,"y": 22},{"x": 22,"y": 31},{"x": 10,"y": 31},{"x": 1,"y": 22},{"x": 1,"y": 10},{"x": 10,"y": 1},{"x": 22,"y": 1}]]}]}]}]},{"bold": false,"italic": false,"name": "HealthDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "HEALTH","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 255,"g": 255,"r": 255}},{"bold": false,"italic": false,"name": "ScoreDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "SCORE: ","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "GameOverDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "BalloonDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "HungerDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "InvincibilityDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"height": 80,"name": "FloorTile","tags": "","texture": "NewFile-1-1.png","type": "TiledSpriteObject::TiledSprite","width": 32,"variables": [],"behaviors": []},{"bold": false,"italic": false,"name": "ScoreFlash","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"name": "Explosion","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-9.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]}]},{"name": "HealthBar","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-11.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]}]},{"height": 32,"name": "HealthPip","tags": "","texture": "NewFile-1-0.png","type": "TiledSpriteObject::TiledSprite","width": 8,"variables": [],"behaviors": []},{"name": "Dog","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [{"name": "Spooked","value": "0"}],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": true,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-19.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []},{"hasCustomCollisionMask": false,"image": "NewObject-2.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []},{"hasCustomCollisionMask": false,"image": "NewObject-3.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]}]},{"bold": false,"italic": false,"name": "PausedDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "LevelDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "LEVEL 1","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "DogDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "BalloonCountDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ChickenCountDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "FPSDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}}],"events": [],"layers": [{"name": "","visibility": true,"cameras": [{"defaultSize": true,"defaultViewport": true,"height": 0,"viewportBottom": 1,"viewportLeft": 0,"viewportRight": 1,"viewportTop": 0,"width": 0}],"effects": []}],"behaviorsSharedData": []},{"b": 134,"disableInputWhenNotFocused": true,"mangledName": "High_32Scores","name": "High Scores","oglFOV": 90,"oglZFar": 500,"oglZNear": 1,"r": 184,"standardSortMethod": true,"stopSoundsOnStartup": true,"title": "","v": 233,"uiSettings": {"grid": false,"gridB": 255,"gridG": 180,"gridHeight": 32,"gridOffsetX": 0,"gridOffsetY": 0,"gridR": 158,"gridWidth": 32,"snap": true,"windowMask": false,"zoomFactor": 0.815},"objectsGroups": [],"variables": [],"instances": [{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "HighScoresTitle","width": 0,"x": 430,"y": 100,"zOrder": 1,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreName1","width": 0,"x": 330,"y": 160,"zOrder": 2,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreName2","width": 0,"x": 330,"y": 200,"zOrder": 3,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreName3","width": 0,"x": 330,"y": 240,"zOrder": 4,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreName4","width": 0,"x": 330,"y": 280,"zOrder": 5,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreName5","width": 0,"x": 330,"y": 320,"zOrder": 6,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreDisplay1","width": 0,"x": 550,"y": 160,"zOrder": 7,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreDisplay2","width": 0,"x": 550,"y": 200,"zOrder": 8,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreDisplay3","width": 0,"x": 550,"y": 240,"zOrder": 9,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreDisplay4","width": 0,"x": 550,"y": 280,"zOrder": 10,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreDisplay5","width": 0,"x": 550,"y": 320,"zOrder": 11,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "Continue","width": 0,"x": 300,"y": 440,"zOrder": 12,"numberProperties": [],"stringProperties": [],"initialVariables": []}],"objects": [{"bold": false,"italic": false,"name": "HighScoresTitle","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "HIGH SCORES","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ScoreName1","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "ScoreName1","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ScoreName2","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "ScoreName2","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ScoreName3","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "ScoreName3","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ScoreName4","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "ScoreName4","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ScoreName5","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "ScoreName5","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ScoreDisplay1","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "Score1","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ScoreDisplay2","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "Score2","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ScoreDisplay3","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "Score3","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ScoreDisplay4","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "Score4","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ScoreDisplay5","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "Score5","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "Continue","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "Press Space to return to Main Menu","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}}],"events": [],"layers": [{"name": "","visibility": true,"cameras": [{"defaultSize": true,"defaultViewport": true,"height": 0,"viewportBottom": 1,"viewportLeft": 0,"viewportRight": 1,"viewportTop": 0,"width": 0}],"effects": []}],"behaviorsSharedData": []},{"b": 134,"disableInputWhenNotFocused": true,"mangledName": "Name_32Entry","name": "Name Entry","oglFOV": 90,"oglZFar": 500,"oglZNear": 1,"r": 184,"standardSortMethod": true,"stopSoundsOnStartup": true,"title": "","v": 233,"uiSettings": {"grid": false,"gridB": 255,"gridG": 180,"gridHeight": 32,"gridOffsetX": 0,"gridOffsetY": 0,"gridR": 158,"gridWidth": 32,"snap": true,"windowMask": false,"zoomFactor": 1},"objectsGroups": [],"variables": [],"instances": [{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ScoreDisplay","width": 0,"x": 372,"y": 140,"zOrder": 1,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "MessageDisplay","width": 0,"x": 296,"y": 174,"zOrder": 2,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "EntryDisplay","width": 0,"x": 372,"y": 224,"zOrder": 3,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "Entry","width": 0,"x": 360,"y": 64,"zOrder": 4,"numberProperties": [],"stringProperties": [],"initialVariables": []}],"objects": [{"name": "Entry","tags": "","type": "TextEntryObject::TextEntry","variables": [],"behaviors": []},{"bold": false,"italic": false,"name": "ScoreDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "Score: ","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "MessageDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "You got a high score! Please enter name.","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "EntryDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}}],"events": [],"layers": [{"name": "","visibility": true,"cameras": [{"defaultSize": true,"defaultViewport": true,"height": 0,"viewportBottom": 1,"viewportLeft": 0,"viewportRight": 1,"viewportTop": 0,"width": 0}],"effects": []}],"behaviorsSharedData": []},{"b": 134,"disableInputWhenNotFocused": true,"mangledName": "Instructions","name": "Instructions","oglFOV": 90,"oglZFar": 500,"oglZNear": 1,"r": 184,"standardSortMethod": true,"stopSoundsOnStartup": true,"title": "","v": 233,"uiSettings": {"grid": false,"gridB": 255,"gridG": 180,"gridHeight": 32,"gridOffsetX": 0,"gridOffsetY": 0,"gridR": 158,"gridWidth": 32,"snap": true,"windowMask": false,"zoomFactor": 0.8416},"objectsGroups": [],"variables": [],"instances": [{"angle": 0,"customSize": true,"height": 141,"layer": "","locked": false,"name": "CharactersDisplay","width": 995,"x": 470,"y": 245,"zOrder": 1,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "BalloonBig","width": 0,"x": 280,"y": 235,"zOrder": 2,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "BalloonMid","width": 0,"x": 345,"y": 235,"zOrder": 3,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "BalloonSmall","width": 0,"x": 400,"y": 235,"zOrder": 4,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ExitDisplay","width": 0,"x": 300,"y": 440,"zOrder": 5,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "Chicken","width": 0,"x": 330,"y": 300,"zOrder": 6,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "CookedChicken","width": 0,"x": 380,"y": 300,"zOrder": 7,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "Bomb","width": 0,"x": 355,"y": 345,"zOrder": 8,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "Dog","width": 0,"x": 355,"y": 390,"zOrder": 9,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "InstructionsDisplay","width": 0,"x": 20,"y": 120,"zOrder": 10,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "LoreDisplay","width": 0,"x": 20,"y": 5,"zOrder": 11,"numberProperties": [],"stringProperties": [],"initialVariables": []}],"objects": [{"bold": false,"italic": false,"name": "CharactersDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "Balloons:  Hit them with your bullets to score points,\n                  and make their cargo drop.\n                  Hit many with one shot for big points!\nChickens:  Feast on them to restore lost health!\n                  Even more so when cooked!\nBombs:      Explodes on contact!\n                  Will roll across the ground if shot down.\nJackals:   They prey on chickens, but are easily spooked.\n","font": "Retro Gaming.ttf","characterSize": 16,"color": {"b": 0,"g": 0,"r": 0}},{"name": "BalloonBig","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-13.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]}]},{"name": "BalloonMid","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": true,"image": "NewObject-1-15.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": [[{"x": 1,"y": 12},{"x": 12,"y": 1},{"x": 28,"y": 1},{"x": 39,"y": 12},{"x": 39,"y": 25},{"x": 28,"y": 35},{"x": 12,"y": 35},{"x": 1,"y": 25}]]}]}]}]},{"name": "BalloonSmall","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": true,"image": "NewObject-1-16.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": [[{"x": 10,"y": 1},{"x": 21,"y": 1},{"x": 31,"y": 10},{"x": 31,"y": 19},{"x": 21,"y": 28},{"x": 10,"y": 28},{"x": 1,"y": 19},{"x": 1,"y": 10}]]}]}]}]},{"name": "Chicken","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [{"name": "GravityAcceleration","value": ""},{"name": "WalkFactor","value": ""}],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-7.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]},{"name": "NewObject-1-7","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-7-1.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]}]},{"name": "CookedChicken","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [{"name": "GravityAcceleration","value": ""}],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": true,"image": "NewObject-1-5.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": [[{"x": 31,"y": 5},{"x": 31,"y": 21},{"x": 21,"y": 29},{"x": 11,"y": 29},{"x": 1,"y": 21},{"x": 1,"y": 10},{"x": 11,"y": 1},{"x": 25,"y": 1}]]}]}]}]},{"name": "Bomb","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [{"name": "GravityAcceleration","value": ""}],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": true,"image": "NewObject-1-8.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": [[{"x": 31,"y": 10},{"x": 31,"y": 22},{"x": 22,"y": 31},{"x": 10,"y": 31},{"x": 1,"y": 22},{"x": 1,"y": 10},{"x": 10,"y": 1},{"x": 22,"y": 1}]]}]}]}]},{"name": "Dog","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [{"name": "Spooked","value": "0"}],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-18.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]}]},{"bold": false,"italic": false,"name": "ExitDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "Press Space to return to Main Menu","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "InstructionsDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "Controls: -\nA, D: Move left and right\nW, S or K, L: Aim Cannon up and down\nSpace: Fire Cannon\nP, O: Pause, and Unpause\nQ: Quit to Main Menu","font": "Retro Gaming.ttf","characterSize": 16,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "LoreDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "Preface: -\nYou are a shark that lives in a desert and has a large gun. The people of the desert use contrivances\nof cloth and helium to deliver their food supplies across this unforgiving land. Use your gun to shoot\ndown this food to sate your persistent hunger, but aim carefully, as firing will draw from your\never-depleting vitality.","font": "Retro Gaming.ttf","characterSize": 16,"color": {"b": 0,"g": 0,"r": 0}}],"events": [],"layers": [{"name": "","visibility": true,"cameras": [{"defaultSize": true,"defaultViewport": true,"height": 0,"viewportBottom": 1,"viewportLeft": 0,"viewportRight": 1,"viewportTop": 0,"width": 0}],"effects": []}],"behaviorsSharedData": []},{"b": 134,"disableInputWhenNotFocused": true,"mangledName": "Audio_32Menu","name": "Audio Menu","oglFOV": 90,"oglZFar": 500,"oglZNear": 1,"r": 184,"standardSortMethod": true,"stopSoundsOnStartup": true,"title": "","v": 233,"uiSettings": {"grid": false,"gridB": 255,"gridG": 180,"gridHeight": 32,"gridOffsetX": 0,"gridOffsetY": 0,"gridR": 158,"gridWidth": 32,"snap": true,"windowMask": false,"zoomFactor": 0.9472},"objectsGroups": [],"variables": [],"instances": [{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "MusicLevel","width": 0,"x": 450,"y": 200,"zOrder": 1,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "SoundLevel","width": 0,"x": 450,"y": 240,"zOrder": 2,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ReturnSelection","width": 0,"x": 450,"y": 280,"zOrder": 3,"numberProperties": [],"stringProperties": [],"initialVariables": []},{"angle": 0,"customSize": false,"height": 0,"layer": "","locked": false,"name": "ControlsDisplay","width": 0,"x": 400,"y": 400,"zOrder": 4,"numberProperties": [],"stringProperties": [],"initialVariables": []}],"objects": [{"name": "Selector","tags": "","type": "Sprite","updateIfNotVisible": false,"variables": [],"behaviors": [],"animations": [{"name": "NewObject","useMultipleDirections": false,"directions": [{"looping": false,"timeBetweenFrames": 0.08,"sprites": [{"hasCustomCollisionMask": false,"image": "NewObject-1-6.png","points": [],"originPoint": {"name": "origine","x": 0,"y": 0},"centerPoint": {"automatic": true,"name": "centre","x": 0,"y": 0},"customCollisionMask": []}]}]}]},{"bold": false,"italic": false,"name": "MusicLevel","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "MUSIC VOLUME: ","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "SoundLevel","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "SOUND VOLUME: ","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ReturnSelection","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "BACK TO MAIN","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}},{"bold": false,"italic": false,"name": "ControlsDisplay","smoothed": true,"tags": "","type": "TextObject::Text","underlined": false,"variables": [],"behaviors": [],"string": "W, S - Menu Navigation\nSpace - Adjust/Select\n","font": "Retro Gaming.ttf","characterSize": 20,"color": {"b": 0,"g": 0,"r": 0}}],"events": [],"layers": [{"name": "","visibility": true,"cameras": [{"defaultSize": true,"defaultViewport": true,"height": 0,"viewportBottom": 1,"viewportLeft": 0,"viewportRight": 1,"viewportTop": 0,"width": 0}],"effects": []}],"behaviorsSharedData": []}],"externalEvents": [],"eventsFunctionsExtensions": [{"author": "Bouh","description": "Add support for gamepads (or other controllers) to your game, giving access to information such as button presses, axis positions, axis force, trigger pressure, deadzone for each gamepad, etc...\n\nUp to 4 gamepads can be connected: for each condition or expression, you'll have to enter the index of the gamepad to read. This is 1, 2,3 or 4.","extensionNamespace": "","fullName": "Gamepads (controllers)","name": "Gamepads","shortDescription": "Add support for gamepads (or other controllers) to your game, giving access to information such as button presses, axis positions, trigger pressure, etc...","tags": "controllers,gamepads,joysticks,axis,xbox,ps4","version": "0.0.8","eventsFunctions": [{"description": "Get the value of the pressure on a gamepad trigger.","fullName": "Pressure on a gamepad trigger","functionType": "Expression","name": "TriggerPressure","sentence": "Player _PARAM1_ push axis _PARAM2_ to _PARAM3_","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst trigger = eventsFunctionContext.getArgument(\"trigger\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in expression: \"Pressure on a gamepad trigger\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nif (trigger != \"LT\" && trigger != \"RT\" && trigger != \"L2\" && trigger != \"R2\") {\r\n    console.error('Parameter trigger is not valid in expression: \"Pressure on a gamepad trigger\"');\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nswitch (trigger) {\r\n    case 'LT':\r\n    case 'L2':\r\n        eventsFunctionContext.returnValue = gamepad.buttons[6].value;\r\n        break;\r\n\r\n    case 'RT':\r\n    case 'R2':\r\n        eventsFunctionContext.returnValue = gamepad.buttons[7].value;\r\n        break;\r\n\r\n    default:\r\n        eventsFunctionContext.returnValue = -1;\r\n        break;\r\n}","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"},{"codeOnly": false,"defaultValue": "","description": "Trigger: \"LT\", \"RT\", \"L2\", \"R2\"","longDescription": "","name": "trigger","optional": false,"supplementaryInformation": "","type": "string"}],"objectGroups": []},{"description": "Get the force value of a gamepad stick.\n0 is stick on default position, 1 is at the maximum.","fullName": "Value of a stick force","functionType": "Expression","name": "StickForce","sentence": "Player _PARAM1_ push axis _PARAM2_ to _PARAM3_","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst stick = eventsFunctionContext.getArgument(\"stick\").toUpperCase();\r\n\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier is not valid in expression: \"Value of a stick force\"');\r\n    return;\r\n}\r\n\r\nif (stick !== \"LEFT\" && stick !== \"RIGHT\") {\r\n    console.error('Parameter stick is not valid in expression: \"Value of a stick force\"');\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\n\r\nswitch (stick) {\r\n    case 'LEFT':\r\n        eventsFunctionContext.returnValue = gdjs.evtTools.common.clamp(Math.abs(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId)) + Math.abs(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId)), 0, 1);\r\n        break;\r\n\r\n    case 'RIGHT':\r\n        eventsFunctionContext.returnValue = gdjs.evtTools.common.clamp(Math.abs(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId)) + Math.abs(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId)), 0, 1);\r\n        break;\r\n\r\n    default:\r\n        eventsFunctionContext.returnValue = -1;\r\n        break;\r\n}","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"},{"codeOnly": false,"defaultValue": "","description": "Stick: \"LEFT\" or \"RIGHT\"","longDescription": "","name": "stick","optional": false,"supplementaryInformation": "","type": "string"}],"objectGroups": []},{"description": "Get the rotation value of a gamepad stick.\nIf the deadzone value is high, the angle value is rounded to main axes, left, left, up, down.\nAn zero deadzone value give a total freedom on the angle value.","fullName": "Value of a stick rotation","functionType": "Expression","name": "StickRotationValue","sentence": "Player _PARAM1_ push axis _PARAM2_ to _PARAM3_","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst stick = eventsFunctionContext.getArgument(\"stick\").toUpperCase();\r\n\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier is not valid in expression: \"Value of a stick rotation\"');\r\n    return;\r\n}\r\nif (stick !== \"LEFT\" && stick !== \"RIGHT\") {\r\n    console.error('Parameter stick is not valid in expression: \"Value of a stick rotation\"');\r\n    return;\r\n}\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nswitch (stick) {\r\n    case 'LEFT':\r\n        eventsFunctionContext.returnValue = gdjs._extensionController.axisToAngle(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId), gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId));\r\n        break;\r\n\r\n    case 'RIGHT':\r\n        eventsFunctionContext.returnValue = gdjs._extensionController.axisToAngle(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId), gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId));\r\n        break;\r\n\r\n    default:\r\n        eventsFunctionContext.returnValue = -1;\r\n        break;\r\n}","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"},{"codeOnly": false,"defaultValue": "","description": "Stick: \"LEFT\" or \"RIGHT\"","longDescription": "","name": "stick","optional": false,"supplementaryInformation": "","type": "string"}],"objectGroups": []},{"description": "Get the value of axis of a gamepad stick.","fullName": "Value of a gamepad axis","functionType": "Expression","name": "AxisValue","sentence": "Player _PARAM1_ push axis _PARAM2_ to _PARAM3_","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst stick = eventsFunctionContext.getArgument(\"stick\").toUpperCase();\r\nconst direction = eventsFunctionContext.getArgument(\"direction\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier is not valid in expression: \"Value of a gamepad axis\"');\r\n    return;\r\n}\r\nif (stick != \"LEFT\" && stick != \"RIGHT\") {\r\n    console.error('Parameter stick is not valid in expression: \"Value of a gamepad axis\"');\r\n    return;\r\n}\r\nif (direction != \"UP\" && direction != \"DOWN\" && direction != \"LEFT\" && direction != \"RIGHT\" && direction != \"HORIZONTAL\" && direction != \"VERTICAL\") {\r\n    console.error('Parameter direction is not valid in expression: \"Value of a gamepad axis\"');\r\n    return;\r\n}\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nlet parameterError = false;\r\nswitch (stick) {\r\n    case 'LEFT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = -gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = -gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId);\r\n                }\r\n                break;\r\n\r\n            case \"HORIZONTAL\":\r\n                eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId);\r\n                break;\r\n\r\n            case \"VERTICAL\":\r\n                eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        break;\r\n\r\n    case 'RIGHT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = -gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = -gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId);\r\n                }\r\n                break;\r\n\r\n            case \"HORIZONTAL\":\r\n                eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId);\r\n                break;\r\n\r\n            case \"VERTICAL\":\r\n                eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        break;\r\n\r\n    default:\r\n        break;\r\n}\r\n","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"},{"codeOnly": false,"defaultValue": "","description": "Stick: \"LEFT\" or \"RIGHT\"","longDescription": "","name": "stick","optional": false,"supplementaryInformation": "","type": "string"},{"codeOnly": false,"defaultValue": "","description": "Direction: \"UP\", \"DOWN\", \"LEFT\", \"RIGHT\", \"HORIZONTAL\" or \"VERTICAL\"","longDescription": "","name": "direction","optional": false,"supplementaryInformation": "","type": "string"}],"objectGroups": []},{"description": "Test if a button is released on a gamepad. Buttons can be:\n* Xbox: \"A\", \"B\", \"X\", \"Y\", \"LB\", \"RB\", \"LT\", \"RT\", \"BACK\", \"START\",\n* PS4: \"CROSS\", \"SQUARE\", \"CIRCLE\", \"TRIANGLE\", \"L1\", \"L2\", \"R1\", \"R2\", \"SHARE\", \"OPTIONS\", \"PS_BUTTON\", \"CLICK_TOUCHPAD\",\n* Other: \"UP\", \"DOWN\", \"LEFT\", \"RIGHT\", \"CLICK_STICK_LEFT\", \"CLICK_STICK_RIGHT\"","fullName": "Gamepad button released","functionType": "Condition","name": "C_Button_released","sentence": "Button _PARAM2_ of gamepad _PARAM1_ is released","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst button = eventsFunctionContext.getArgument(\"button\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in condition: \"Gamepad button released\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nif (button === \"\") {\r\n    console.error('Parameter button is not valid in condition: \"Gamepad button released\"');\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nlet buttonId;\r\n\r\nswitch (button) {\r\n    case 'A':\r\n    case 'CROSS':\r\n        buttonId = 0;\r\n        break;\r\n    case 'B':\r\n    case 'CIRCLE':\r\n        buttonId = 1;\r\n        break;\r\n    case 'X':\r\n    case 'SQUARE':\r\n        buttonId = 2;\r\n        break;\r\n    case 'Y':\r\n    case 'TRIANGLE':\r\n        buttonId = 3;\r\n        break;\r\n    case 'LB':\r\n    case 'L1':\r\n        buttonId = 4;\r\n        break;\r\n    case 'RB':\r\n    case 'R1':\r\n        buttonId = 5;\r\n        break;\r\n    case 'LT':\r\n    case 'L2':\r\n        buttonId = 6;\r\n        break;\r\n    case 'RT':\r\n    case 'R2':\r\n        buttonId = 7;\r\n        break;\r\n\r\n    case 'UP':\r\n        buttonId = 12;\r\n        break;\r\n    case 'DOWN':\r\n        buttonId = 13;\r\n        break;\r\n    case 'LEFT':\r\n        buttonId = 14;\r\n        break;\r\n    case 'RIGHT':\r\n        buttonId = 15;\r\n        break;\r\n\r\n    case 'BACK':\r\n    case 'SHARE':\r\n        buttonId = 8;\r\n        break;\r\n    case 'START':\r\n    case 'OPTIONS':\r\n        buttonId = 9;\r\n        break;\r\n\r\n    case 'CLICK_STICK_LEFT':\r\n        buttonId = 10;\r\n        break;\r\n    case 'CLICK_STICK_RIGHT':\r\n        buttonId = 11;\r\n        break;\r\n\r\n    //PS4\r\n    case 'PS_BUTTON':\r\n        buttonId = 16;\r\n        break;\r\n    case 'CLICK_TOUCHPAD':\r\n        buttonId = 17;\r\n        break;\r\n\r\n    default:\r\n        console.error('The button: ' + button + ' in condition: \"Gamepad button released\" is not valid.');\r\n        break;\r\n}\r\n\r\nif (buttonId === undefined) {\r\n    console.error('There is no buttons valid in condition: \"Gamepad button released\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\nif (gamepad.buttons == null || gamepad.buttons[buttonId] == null) {\r\n    console.error('Buttons on the gamepad are not accessible in condition: \"Gamepad button released\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\n//Define default value on pressed button or use previous value\r\ngdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId] = gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId] || { pressed: false };\r\n\r\n//Get state of button at previous frame\r\nconst previousStateButton = gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId].pressed;\r\n\r\n//When previousStateButton is true and actual button state is not pressed\r\n//Player have release the button\r\nif (previousStateButton === true && gamepad.buttons[buttonId].pressed === false) {\r\n    // Save the last button used for the player    \r\n    gdjs._extensionController.players[playerId].lastButtonUsed = buttonId;\r\n    gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId].pressed = true;\r\n    eventsFunctionContext.returnValue = true;\r\n\r\n} else {\r\n    gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId].pressed = false;\r\n    eventsFunctionContext.returnValue = false;\r\n}\r\n","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"},{"codeOnly": false,"defaultValue": "","description": "The name of the button.","longDescription": "","name": "button","optional": false,"supplementaryInformation": "","type": "string"}],"objectGroups": []},{"description": "Return the index of the last pressed button of a gamepad","fullName": "Last pressed button (id)","functionType": "Expression","name": "LastButtonID","sentence": "","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "//Get function parameter\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\n\r\n//Player id is not valid\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in expression: \"Last pressed button (id)\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\n\r\n//Return the last button used by the player\r\neventsFunctionContext.returnValue = gdjs._extensionController.players[playerId].lastButtonUsed;","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"}],"objectGroups": []},{"description": "Check if any button is pressed on a gamepad.","fullName": "Any gamepad button pressed","functionType": "Condition","name": "C_Any_Button_pressed","sentence": "Any button of gamepad _PARAM1_ is pressed","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameter\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in condition: \"Any gamepad button pressed\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nlet buttonId;\r\nfor (let i = 0; i < gamepad.buttons.length; i++) { //For each buttons\r\n    if (gamepad.buttons[i].pressed) { //One of them is pressed\r\n        buttonId = i; //Save the button pressed\r\n        break;\r\n    }\r\n}\r\n\r\nif (buttonId === undefined) {\r\n    console.error('There is no buttons valid in condition: \"Any gamepad button pressed\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\nif (gamepad.buttons == null || gamepad.buttons[buttonId] == null) {\r\n    console.error('Buttons on the gamepad are not accessible in condition: \"Any gamepad button pressed\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\n//When a button is pressed, save the button in lastButtonUsed for each players\r\nif (gamepad.buttons[buttonId].pressed) gdjs._extensionController.players[playerId].lastButtonUsed = buttonId;\r\neventsFunctionContext.returnValue = gamepad.buttons[buttonId].pressed;\r\n\r\n\r\n","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"}],"objectGroups": []},{"description": "Return the last button pressed. \nButtons for Xbox and PS4 can be:\n* Xbox: \"A\", \"B\", \"X\", \"Y\", \"LB\", \"RB\", \"LT\", \"RT\", \"BACK\", \"START\",\n* PS4: \"CROSS\", \"SQUARE\", \"CIRCLE\", \"TRIANGLE\", \"L1\", \"L2\", \"R1\", \"R2\", \"SHARE\", \"OPTIONS\", \"PS_BUTTON\", \"CLICK_TOUCHPAD\",\n* Both: \"UP\", \"DOWN\", \"LEFT\", \"RIGHT\", \"CLICK_STICK_LEFT\", \"CLICK_STICK_RIGHT\"","fullName": "Last pressed button (string)","functionType": "StringExpression","name": "LastButtonString","sentence": "Button _PARAM2_ of gamepad _PARAM1_ is pressed","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst controllerType = eventsFunctionContext.getArgument(\"controller_type\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in string expression: \"Last pressed button (LastButtonString)\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nif (controllerType === \"\") {\r\n    console.error('Parameter controller type is not valid in string expression: \"Last pressed button (LastButtonString)\"');\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\nif (gamepad !== null) { //Gamepad exist\r\n    //Get last btn id\r\n    const lastButtonUsedID = gdjs._extensionController.players[playerId].lastButtonUsed;\r\n\r\n    //Return last button as string    \r\n    eventsFunctionContext.returnValue = gdjs._extensionController.getInputString(controllerType, lastButtonUsedID);\r\n\r\n} else { //Gamepad dosen't exist\r\n    console.error('Your controller is not supported or the gamepad wasn\\'t detected in string expression: \"Last pressed button (LastButtonString)\"');\r\n    eventsFunctionContext.returnValue = \"Gamepad not connected\";\r\n}","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"},{"codeOnly": false,"defaultValue": "","description": "Controller type \"XBOX\" or \"PS4\". This defines the type of button names to return as a string. \"Mapping not exist\" is returned if invalid type is used.","longDescription": "","name": "controller_type","optional": false,"supplementaryInformation": "","type": "string"}],"objectGroups": []},{"description": "Check if a button is pressed on a gamepad. \nButtons can be:\n* Xbox: \"A\", \"B\", \"X\", \"Y\", \"LB\", \"RB\", \"LT\", \"RT\", \"BACK\", \"START\",\n* PS4: \"CROSS\", \"SQUARE\", \"CIRCLE\", \"TRIANGLE\", \"L1\", \"L2\", \"R1\", \"R2\", \"SHARE\", \"OPTIONS\", \"PS_BUTTON\", \"CLICK_TOUCHPAD\",\n* Other: \"UP\", \"DOWN\", \"LEFT\", \"RIGHT\", \"CLICK_STICK_LEFT\", \"CLICK_STICK_RIGHT\"","fullName": "Gamepad button pressed","functionType": "Condition","name": "C_Button_pressed","sentence": "Button _PARAM2_ of gamepad _PARAM1_ is pressed","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst button = eventsFunctionContext.getArgument(\"button\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in condition: \"Gamepad button pressed\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nif (button === \"\") {\r\n    console.error('Parameter button is not valid in condition: \"Gamepad button pressed\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nlet buttonId;\r\n\r\nswitch (button) {\r\n    case 'A':\r\n    case 'CROSS':\r\n        buttonId = 0;\r\n        break;\r\n    case 'B':\r\n    case 'CIRCLE':\r\n        buttonId = 1;\r\n        break;\r\n    case 'X':\r\n    case 'SQUARE':\r\n        buttonId = 2;\r\n        break;\r\n    case 'Y':\r\n    case 'TRIANGLE':\r\n        buttonId = 3;\r\n        break;\r\n    case 'LB':\r\n    case 'L1':\r\n        buttonId = 4;\r\n        break;\r\n    case 'RB':\r\n    case 'R1':\r\n        buttonId = 5;\r\n        break;\r\n    case 'LT':\r\n    case 'L2':\r\n        buttonId = 6;\r\n        break;\r\n    case 'RT':\r\n    case 'R2':\r\n        buttonId = 7;\r\n        break;\r\n\r\n    case 'UP':\r\n        buttonId = 12;\r\n        break;\r\n    case 'DOWN':\r\n        buttonId = 13;\r\n        break;\r\n    case 'LEFT':\r\n        buttonId = 14;\r\n        break;\r\n    case 'RIGHT':\r\n        buttonId = 15;\r\n        break;\r\n\r\n    case 'BACK':\r\n    case 'SHARE':\r\n        buttonId = 8;\r\n        break;\r\n    case 'START':\r\n    case 'OPTIONS':\r\n        buttonId = 9;\r\n        break;\r\n\r\n    case 'CLICK_STICK_LEFT':\r\n        buttonId = 10;\r\n        break;\r\n    case 'CLICK_STICK_RIGHT':\r\n        buttonId = 11;\r\n        break;\r\n\r\n    //PS4\r\n    case 'PS_BUTTON':\r\n        buttonId = 16;\r\n        break;\r\n    case 'CLICK_TOUCHPAD':\r\n        buttonId = 17;\r\n        break;\r\n\r\n    default:\r\n        console.error('The button: ' + button + ' in condition: \"Gamepad button pressed\" is not valid.');\r\n        eventsFunctionContext.returnValue = false;\r\n        break;\r\n}\r\n\r\n\r\n\r\nif (buttonId === undefined) {\r\n    console.error('There is no buttons valid in condition: \"Gamepad button pressed\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\nif (gamepad.buttons == null || gamepad.buttons[buttonId] == null) {\r\n    console.error('Buttons on the gamepad are not accessible in condition: \"Gamepad button pressed\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\n//When a button is pressed, save the button in lastButtonUsed for each players\r\nif (gamepad.buttons[buttonId].pressed) gdjs._extensionController.players[playerId].lastButtonUsed = buttonId;\r\neventsFunctionContext.returnValue = gamepad.buttons[buttonId].pressed;\r\n\r\n\r\n\r\n","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"},{"codeOnly": false,"defaultValue": "","description": "The name of the button.","longDescription": "","name": "button","optional": false,"supplementaryInformation": "","type": "string"}],"objectGroups": []},{"description": "Return the value of the deadzone applied to a gamepad sticks, between 0 and 1.","fullName": "Gamepad deadzone for sticks","functionType": "Expression","name": "Deadzone","sentence": "","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::Standard","conditions": [],"actions": [],"events": []},{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "//Get function parameter\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in expression: \"Gamepad deadzone for sticks\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\n///Return the deadzone value for a given player\r\neventsFunctionContext.returnValue = gdjs._extensionController.players[playerId].deadzone;","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"}],"objectGroups": []},{"description": "Set the deadzone for sticks of the gamepad. The deadzone is an area for which movement on sticks won't be taken into account (instead, the stick will be considered as not moved). Deadzone is between 0 and 1, and is by default 0.2.","fullName": "Set gamepad deadzone for sticks","functionType": "Action","name": "A_Set_deadzone","sentence": "Set deadzone for sticks on gamepad: _PARAM1_ to _PARAM2_","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "//Get function parameter\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst newDeadzone = eventsFunctionContext.getArgument(\"deadzone\");\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in action: \"Set gamepad deadzone for sticks\", is not valid, must be between 0 and 4.');\r\n    return;\r\n}\r\n\r\n// clamp the newDeadzone in range [0, 1].\r\n// https://github.com/4ian/GDevelop-extensions/pull/33#issuecomment-618224857\r\ngdjs._extensionController.players[playerId].deadzone = gdjs.evtTools.common.clamp(newDeadzone, 0, 1);\r\n","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"},{"codeOnly": false,"defaultValue": "","description": "Deadzone for sticks, 0.2 by default (0 to 1)","longDescription": "","name": "deadzone","optional": false,"supplementaryInformation": "","type": "expression"}],"objectGroups": []},{"description": "Check if a stick of a gamepad is pushed in a given direction.","fullName": "Gamepad stick pushed (axis)","functionType": "Condition","name": "C_Axis_pushed","sentence": "_PARAM2_ stick of gamepad _PARAM1_ is pushed in direction _PARAM3_","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst stick = eventsFunctionContext.getArgument(\"stick\").toUpperCase();\r\nconst direction = eventsFunctionContext.getArgument(\"direction\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in condition: \"Gamepad stick pushed (axis)\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nif (stick != \"LEFT\" && stick != \"RIGHT\") {\r\n    console.error('Parameter stick in condition: \"Gamepad stick pushed (axis)\", is not valid, must be LEFT or RIGHT');\r\n    return;\r\n}\r\nif (direction != \"UP\" && direction != \"DOWN\" && direction != \"LEFT\" && direction != \"RIGHT\") {\r\n    console.error('Parameter deadzone in condition: \"Gamepad stick pushed (axis)\", is not valid, must be UP, DOWN, LEFT or RIGHT');\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) {\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\n\r\n//Define in onFirstSceneLoaded function\r\nconst getNormalizedAxisValue = gdjs._extensionController.getNormalizedAxisValue;\r\n\r\nswitch (stick) {\r\n    case 'LEFT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                if (getNormalizedAxisValue(gamepad.axes[0], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (getNormalizedAxisValue(gamepad.axes[0], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (getNormalizedAxisValue(gamepad.axes[1], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (getNormalizedAxisValue(gamepad.axes[1], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.error('The value Direction on stick Left on the condition: \"Gamepad stick pushed (axis)\" is not valid.');\r\n                eventsFunctionContext.returnValue = false;\r\n                break;\r\n        }\r\n        break;\r\n\r\n    case 'RIGHT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                if (getNormalizedAxisValue(gamepad.axes[2], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (getNormalizedAxisValue(gamepad.axes[2], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (getNormalizedAxisValue(gamepad.axes[3], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (getNormalizedAxisValue(gamepad.axes[3], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.error('The value Direction on stick Right on the condition: \"Gamepad stick pushed (axis)\" is not valid.');\r\n                eventsFunctionContext.returnValue = false;\r\n                break;\r\n        }\r\n        break;\r\n\r\n    default:\r\n        console.error('The value Stick on the condition: \"Gamepad stick pushed (axis)\" is not valid.');\r\n        eventsFunctionContext.returnValue = false;\r\n        break;\r\n}\r\n\r\neventsFunctionContext.returnValue = false;\r\n","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"},{"codeOnly": false,"defaultValue": "","description": "Stick: \"LEFT\" or \"RIGHT\"","longDescription": "","name": "stick","optional": false,"supplementaryInformation": "","type": "string"},{"codeOnly": false,"defaultValue": "","description": "Direction: \"UP\", \"DOWN\", \"LEFT\" or \"RIGHT\"","longDescription": "","name": "direction","optional": false,"supplementaryInformation": "","type": "string"}],"objectGroups": []},{"description": "Return the number of connected gamepads","fullName": "Connected gamepads number","functionType": "Expression","name": "ConnectedGamepadsCount","sentence": "","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::Standard","conditions": [],"actions": [],"events": []},{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n// Gamepads can be disconnected and become null, so we have to filter them.\r\neventsFunctionContext.returnValue = Object.keys(gamepads).filter(key => !!gamepads[key]).length;\r\n","parameterObjects": "","useStrict": true}],"parameters": [],"objectGroups": []},{"description": "Return a string containing informations about the specified gamepad","fullName": "Gamepad type","functionType": "StringExpression","name": "GamepadType","sentence": "Player _PARAM1_ use _PARAM2_ controller","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\n\n//Get function parameter\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\n\nif (playerId < 0 || playerId > 4) {\n    console.error('Parameter gamepad identifier in string expression: \"Gamepad type\", is not valid number, must be between 0 and 4');\n    return;\n}\n\nconst gamepad = gamepads[playerId];\n\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\nif (gamepad == null) return;\n\neventsFunctionContext.returnValue = (gamepad && gamepad.id) ? gamepad.id : \"No information for player \" + (playerId + 1)\n","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"}],"objectGroups": []},{"description": "Check if the specified gamepad has the specified information in its description. Useful to know if the gamepad is a Xbox or PS4 controller.","fullName": "Gamepad type","functionType": "Condition","name": "C_Controller_type","sentence": "Gamepad _PARAM1_ is a _PARAM2_ controller","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\n\n//Get function parameters\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\nconst controllerType = eventsFunctionContext.getArgument(\"controller_type\").toUpperCase();\n\nif (playerId < 0 || playerId > 4) {\n    console.error('Parameter gamepad identifier in condition: \"Gamepad type\", is not valid number, must be between 0 and 4.');\n    return;\n}\nif (controllerType === \"\") {\n    console.error('Parameter type in condition: \"Gamepad type\", is not a string.');\n    return;\n}\n\nconst gamepad = gamepads[playerId];\n\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\nif (gamepad == null) return;\n\neventsFunctionContext.returnValue = gamepad ? gamepad.id.toUpperCase().indexOf(controllerType) !== -1 : false;\n","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"},{"codeOnly": false,"defaultValue": "","description": "Type: \"Xbox\", \"PS4\", \"STEAM\" or \"PS3\" (among other)","longDescription": "","name": "controller_type","optional": false,"supplementaryInformation": "","type": "string"}],"objectGroups": []},{"description": "Check if a gamepad is connected.","fullName": "Gamepad connected","functionType": "Condition","name": "C_Controller_X_is_connected","sentence": "Gamepad _PARAM1_ is plugged and connected","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\n\n//Get function parameter\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\n\nif (playerId < 0 || playerId > 4) {\n    console.error('Parameter gamepad identifier in condition: \"Gamepad connected\", is not valid number, must be between 0 and 4.');\n    return;\n}\n\n// If gamepad was disconnected it will be null (so this will return false)\n// If gamepad was never connected it will be undefined (so this will return false)\neventsFunctionContext.returnValue = !!gamepads[playerId];","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"}],"objectGroups": []},{"description": "Generate a vibration on the specified controller. Might only work if the game is running in a recent web browser.","fullName": "Gamepad vibration","functionType": "Action","name": "A_Vibrate_controller","sentence": "Make gamepad _PARAM1_ vibrate for _PARAM2_ seconds","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::Standard","conditions": [],"actions": [],"events": []},{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\n//Vibration work only on game in browser.\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\n\n//Get function parameters\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\nconst duration = eventsFunctionContext.getArgument(\"duration\") || 1;\n\nif (playerId < 0 || playerId > 4) {\n  console.error('Parameter gamepad identifier in action: \"Gamepad connected\", is not valid number, must be between 0 and 4.');\n  return;\n}\n\nconst gamepad = gamepads[playerId];\n\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\nif (gamepad == null) return;\n\nif (gamepad && gamepad.vibrationActuator) {\n  gamepad.vibrationActuator.playEffect(\"dual-rumble\", {\n    startDelay: 0,\n    duration: duration * 1000,\n    weakMagnitude: 1.0,\n    strongMagnitude: 1.0\n  });\n}","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"},{"codeOnly": false,"defaultValue": "","description": "Time of the vibration, in seconds (optional, default value is 1)","longDescription": "","name": "duration","optional": false,"supplementaryInformation": "","type": "expression"}],"objectGroups": []},{"description": "","fullName": "","functionType": "Action","name": "onFirstSceneLoaded","sentence": "","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::Standard","conditions": [],"actions": [],"events": []},{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "//Define an new private object javascript for the gamepad extension\r\ngdjs._extensionController = {\r\n    players: {\r\n        0: { mapping: 'DEFAULT', lastButtonUsed: -1, deadzone: 0.2, previousFrameStateButtons: {}, },\r\n        1: { mapping: 'DEFAULT', lastButtonUsed: -1, deadzone: 0.2, previousFrameStateButtons: {}, },\r\n        2: { mapping: 'DEFAULT', lastButtonUsed: -1, deadzone: 0.2, previousFrameStateButtons: {}, },\r\n        3: { mapping: 'DEFAULT', lastButtonUsed: -1, deadzone: 0.2, previousFrameStateButtons: {}, },\r\n    },\r\n    controllerButtonNames: { //Map associating controller button ids to button names\r\n        \"XBOX\": {\r\n            0: \"A\",\r\n            1: \"B\",\r\n            2: \"X\",\r\n            3: \"Y\",\r\n            4: \"LB\",\r\n            5: \"RB\",\r\n            6: \"LT\",\r\n            7: \"RT\",\r\n            8: \"BACK\",\r\n            9: \"START\",\r\n            10: \"CLICK_STICK_LEFT\",\r\n            11: \"CLICK_STICK_RIGHT\",\r\n            12: \"UP\",\r\n            13: \"DOWN\",\r\n            14: \"LEFT\",\r\n            15: \"RIGHT\",\r\n            16: \"NONE\",\r\n            17: \"NONE\"\r\n        },\r\n        \"PS4\": {\r\n            0: \"CROSS\",\r\n            1: \"CIRCLE\",\r\n            2: \"SQUARE\",\r\n            3: \"TRIANGLE\",\r\n            4: \"L1\",\r\n            5: \"R1\",\r\n            6: \"L2\",\r\n            7: \"R2\",\r\n            8: \"SHARE\",\r\n            9: \"OPTIONS\",\r\n            10: \"CLICK_STICK_LEFT\",\r\n            11: \"CLICK_STICK_RIGHT\",\r\n            12: \"UP\",\r\n            13: \"DOWN\",\r\n            14: \"LEFT\",\r\n            15: \"RIGHT\",\r\n            16: \"PS_BUTTON\",\r\n            17: \"CLICK_TOUCHPAD\"\r\n        }\r\n    }\r\n};\r\n\r\ngdjs._extensionController.getInputString = function (type, buttonId) {\r\n    const controllerButtonNames = gdjs._extensionController.controllerButtonNames;\r\n    if (controllerButtonNames[type] !== undefined) {\r\n        return controllerButtonNames[type][buttonId];\r\n    }\r\n\r\n    return \"UNKNOWN_BUTTON\";\r\n}\r\n\r\ngdjs._extensionController.axisToAngle = function (deltaX, deltaY) {\r\n    const rad = Math.atan2(deltaY, deltaX);\r\n    const deg = rad * (180 / Math.PI);\r\n    return deg;\r\n}\r\n\r\n//Returns the new value taking into account the dead zone for the player_ID given\r\ngdjs._extensionController.getNormalizedAxisValue = function (v, player_ID) {\r\n    //    gdjs._extensionController = gdjs._extensionController || { deadzone: 0.2 };\r\n\r\n    // Anything smaller than this is assumed to be 0,0\r\n    const DEADZONE = gdjs._extensionController.players[player_ID].deadzone;\r\n\r\n    if (Math.abs(v) < DEADZONE) {\r\n        // In the dead zone, set to 0\r\n        v = 0;\r\n\r\n        if (v == null) {\r\n            return 0;\r\n        } else {\r\n            return v;\r\n        }\r\n\r\n    } else {\r\n        // We're outside the dead zone, but we'd like to smooth\r\n        // this value out so it still runs nicely between 0..1.\r\n        // That is, we don't want it to jump suddenly from 0 to\r\n        // DEADZONE.\r\n\r\n        // Remap v from\r\n        //    DEADZONE..1 to 0..(1-DEADZONE)\r\n        // or from\r\n        //    -1..-DEADZONE to -(1-DEADZONE)..0\r\n\r\n        v = v - Math.sign(v) * DEADZONE;\r\n\r\n        // Remap v from\r\n        //    0..(1-DEADZONE) to 0..1\r\n        // or from\r\n        //    -(1-DEADZONE)..0 to -1..0\r\n\r\n        return v / (1 - DEADZONE);\r\n    }\r\n};","parameterObjects": "","useStrict": true}],"parameters": [],"objectGroups": []},{"description": "","fullName": "","functionType": "Action","name": "onScenePostEvents","sentence": "","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::Standard","conditions": [],"actions": [],"events": []},{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "//Each time a player press a button i save the last button pressed for the next frame\n/** @type {Gamepad[]} */\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\n\n//Get function parameter\nlet countPlayers = Object.keys(gdjs._extensionController.players).length;\n\n//Repeat for each players\nfor (let i = 0; i < countPlayers; i++) {\n    let gamepad = gamepads[i]; // Get the gamepad of the player\n\n    //we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\n    if (gamepad == null) {\n        return;\n    }\n\n    for (let b = 0; b < Object.keys(gamepad.buttons).length; b++) { //For each buttons\n        if (gamepad.buttons[b].pressed) { //One of them is pressed\n            gdjs._extensionController.players[i].lastButtonUsed = b; //Save the button pressed\n\n            //Save the state of the button for the next frame.\n            gdjs._extensionController.players[i].previousFrameStateButtons[b] = { pressed: true };\n        }\n    }\n}\n\n\n","parameterObjects": "","useStrict": true}],"parameters": [],"objectGroups": []},{"description": "Check if any button is released on a gamepad.","fullName": "Any gamepad button released","functionType": "Condition","name": "C_any_button_released","sentence": "Any button of gamepad _PARAM1_ is released","events": [{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::Standard","conditions": [],"actions": [],"events": []},{"disabled": false,"folded": false,"type": "BuiltinCommonInstructions::JsCode","inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n\tconsole.error('Parameter gamepad identifier in condition: \"Any gamepad button released\", is not valid number, must be between 0 and 4.');\r\n\treturn;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nfor (let buttonId = 0; buttonId < gamepad.buttons.length; buttonId++) { //For each buttons on current frame.\r\n\r\n\tif (buttonId === undefined) {\r\n\t\teventsFunctionContext.returnValue = false;\r\n\t\treturn;\r\n\t}\r\n\r\n\t//Get previous value or define value by default for the current button\r\n\tgdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId] = gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId] || { pressed: false };\r\n\r\n\t//Get state of the button at previous frame\r\n\tconst previousStateButtonIsPressed = gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId].pressed;\r\n\r\n\t//Get the state of the button on the current frame.\r\n\tconst currentFrameStateButtonIsPressed = gamepad.buttons[buttonId].pressed;\r\n\r\n\t//When previousStateButtonIsPressed is true and actual button state is not pressed\r\n\t//Player have release the button\r\n\tif (previousStateButtonIsPressed === true && currentFrameStateButtonIsPressed === false) {\r\n\t\tgdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId].pressed = false;\r\n\t\teventsFunctionContext.returnValue = true;\r\n\t\t//break;\r\n\t\treturn;\r\n\t} else {\r\n\t\teventsFunctionContext.returnValue = false;\r\n\t}\r\n\r\n\tif (currentFrameStateButtonIsPressed) gdjs._extensionController.players[playerId].lastButtonUsed = buttonId;\r\n}\r\n","parameterObjects": "","useStrict": true}],"parameters": [{"codeOnly": false,"defaultValue": "","description": "The gamepad identifier: 1, 2, 3 or 4","longDescription": "","name": "player_ID","optional": false,"supplementaryInformation": "","type": "expression"}],"objectGroups": []}],"eventsBasedBehaviors": []}],"externalLayouts": [],"externalSourceFiles": []};